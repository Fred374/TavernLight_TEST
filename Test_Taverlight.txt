Q1 - Fix or improve the implementation of the below methods
-- I could not find the issue with this problem besides being unsure why one would use an addEvent with a time of 1000
local function releaseStorage(player)
	player:setStorageValue(1000, -1)
end

function onLogout(player)
	if player:getStorageValue(1000) == 1 then
		addEvent(releaseStorage, 1000, player)
	end
	return true
end


Q2 - Fix or improve the implementation of the below method

function printSmallGuildNames(memberCount)
	-- this method is supposed to print names of all guilds that have less than memberCount max members
	if db then
	-- Error handling - Checking for a database connection
		local selectGuildQuery = "SELECT name FROM guilds WHERE max_members < %d;"
		local resultId = db.storeQuery(string.format(selectGuildQuery, memberCount))
		while db:next(resultId) do
		-- Iterate through results as we expect more than one return.
			local guildName = result.getString("name")
			print(guildName)
		end
	end
end


Q3 - Fix or improve the name and the implementation of the below method

function do_sth_with_PlayerParty(playerId, membername)
	local player = Player(playerId)
	local party = player:getParty()

	for k,v in pairs(party:getMembers()) do
		if v:getName() == membername then
		-- Could be different instances of the same object, but using the names,
		-- assuming they're unique, will correctly remove the target member.
			party:removeMember(Player(membername))
			break;
			-- Solves two problems, iterating over a changing list and not
			-- needing to continue when target member is removed.
		end
	end
end

Q4 - Assume all method calls work fine. Fix the memory leak issue in below method

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId) {
	Player* player = g_game.getPlayerByName(recipient);
	if (!player) {
		player = new Player(nullptr);
		if (!IOLoginData::loadPlayerByName(player, recipient)) {
			delete player;
			// clean up on failure.
			return;
		}
	}

	Item* item = Item::CreateItem(itemId);
	if (!item) {
		delete player;
		delete item;
		// clean up on failure.
		return;
	}

	g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

	if (player->isOffline()) {
		IOLoginData::savePlayer(player);
	}
}


The last 3 tests require setting up & utilizing Open Source TFS & OTC, this is part of the trial itself to confirm your ability to setup a local environment and basic navigation of Github.

Here you can find the base for TFS & OTC
https://github.com/otland/forgottenserver - Please use the 1.4 Release of TFS for the trial
https://github.com/edubart/otclient

Here you can find some guides to help you

https://github.com/otland/forgottenserver/wiki - step by step guide for setting up the server (1.3 Release of TFS)
https://github.com/edubart/otclient/wiki/Compiling-on-Windows - step by step guide for setting up the client


Please reproduce the following 3 examples in a clean manner with comments as to why you programmed it the way you did. Please make sure to pay special attention to Question 6 video, we are wanting replication of the shaders in this ability (You can skip this question, as it is a more complex one, but its a big bonus if you manage to complete). Additionally please make sure to send videos of reproduction as well as the source code cleanly in their own files and open a Git Repo (public) with the edits/additions/videos made. Also, make sure to add separated commits for these questions. Q1~Q4 can be a single commit, but Q5~Q7 should be separated.